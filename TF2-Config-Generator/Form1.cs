using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TF2_Config_Generator
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void saveConfig()
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();

            string tf2cfgPath = @"Program Files (x86)\Steam\steamapps\common\Team Fortress 2\tf\cfg";

            System.IO.DriveInfo[] myDrives = System.IO.DriveInfo.GetDrives();

            bool setDirectory = false;
            foreach (System.IO.DriveInfo drive in myDrives)
            {
                if (setDirectory)
                    break;

                string tf2Path = drive.Name + tf2cfgPath;

                if (System.IO.Directory.Exists(tf2Path))
                {
                    saveFileDialog1.InitialDirectory = tf2Path;
                    setDirectory = true;
                }
            }

            if (!setDirectory)
                saveFileDialog1.InitialDirectory = @"C:\";


            saveFileDialog1.Title = "Save Configuration File";
            //saveFileDialog1.CheckFileExists = true;
            saveFileDialog1.FileName = "autoexec.cfg";
            saveFileDialog1.CheckPathExists = true;
            saveFileDialog1.AddExtension = true;
            saveFileDialog1.OverwritePrompt = true;
            saveFileDialog1.RestoreDirectory = true;
            saveFileDialog1.DefaultExt = "cfg";
            saveFileDialog1.Filter = "Config files (*.cfg)|*.cfg|All files (*.*)|*.*";
            saveFileDialog1.FilterIndex = 0;
            saveFileDialog1.RestoreDirectory = true;

            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                string filePath = saveFileDialog1.FileName;

                string lines = "// autoexec.cfg\n//\n// Installation:\n// Place this file in " + @"C:\Program Files (x86)\Steam\steamapps\common\Team Fortress 2\tf\cfg\" + "\n//\n// Generated by TF2 Config Generator by crisp\n";

                /*
                lines += "\n// GENERAL\n";
                lines += "sensitivity " + tb_sensitivity.Text + "\n";
                lines += "volume " + tb_volume.Text + "\n";
                if (rb_m_rawinputOn.Checked)  lines += "m_rawinput 1\n"; else lines += "m_rawinput 0\n";
                if (rb_cl_autoreloadOn.Checked) lines += "cl_autoreload 1\n"; else lines += "cl_autoreload 0\n";
                if (rb_hud_fastswitchOn.Checked) lines += "hud_fastswitch 1\n"; else lines += "hud_fastswitch 0\n";
                if (rb_hud_classautokillOn.Checked) lines += "hud_classautokill 1\n"; else lines += "hud_classautokill 0\n";

                lines += "\n// HUD\n";
                if (rb_hud_combattextOn.Checked) lines += "hud_combattext 1\n"; else lines += "hud_combattext 0\n";
                if (rb_cl_hud_minmodeOn.Checked) lines += "cl_hud_minmode 1\n"; else lines += "cl_hud_minmode 0\n";
                if (rb_cl_showfpsOn.Checked) lines += "cl_showfps 1\n"; else lines += "cl_showfps 0\n";
                if (rb_tf_scoreboard_ping_as_textOn.Checked) lines += "tf_scoreboard_ping_as_text 1\n"; else lines += "tf_scoreboard_ping_as_text 0\n";
                if (rb_cl_spec_carrieditemsOn.Checked) lines += "cl_spec_carrieditems 1\n"; else lines += "cl_spec_carrieditems 0\n";
                if (rb_tf_hud_atrget_id_disable_floating_healthOn.Checked) lines += "tf_hud_atrget_id_disable_floating_health 1\n"; else lines += "tf_hud_atrget_id_disable_floating_health 0\n";
                if (rb_cl_autorezoomOn.Checked) lines += "cl_autorezoom 1\n"; else lines += "cl_autorezoom 0\n";

                lines += "\n// GRAPHICS\n";
                lines += "viewmodel_fov " + tb_viewmodel_fov.Text + "\n";
                lines += "viewmodel_fov_demo " + tb_viewmodel_fov_demo.Text + "\n";
                lines += "fov_desired " + tb_fov_desired.Text + "\n";
                if (rb_tf_hud_show_servertimelimitOn.Checked) lines += "tf_hud_show_servertimelimit 1\n"; else lines += "tf_hud_show_servertimelimit 0\n";
                if (rb_cl_hud_playerclass_use_playermodelOn.Checked) lines += "cl_hud_playerclass_use_playermodel 1\n"; else lines += "cl_hud_playerclass_use_playermodel 0\n";
                if (rb_mat_vsyncOn.Checked) lines += "mat_vsync 1\n"; else lines += "mat_vsync 0\n";

                lines += "\n// CLASSES\n";
                if (rb_tf_medigun_autohealOn.Checked) lines += "tf_medigun_autoheal 1\n"; else lines += "tf_medigun_autoheal 0\n";
                if (rb_cl_autorezoomOn.Checked) lines += "cl_autorezoom 1\n"; else lines += "cl_autorezoom 0\n";

                lines += "\n// ADVANCED\n";
                lines += "fps_max " + tb_fps_max.Text + "\n";
                if (rb_cl_disablehtmlmotdOn.Checked) lines += "cl_disablehtmlmotd 1\n"; else lines += "cl_disablehtmlmotd 0\n";
                if (rb_cl_notifications_show_ingameOn.Checked) lines += "cl_notifications_show_ingame 1\n"; else lines += "cl_notifications_show_ingame 0\n";
                if (rb_con_enableOn.Checked) lines += "con_enable 1\n"; else lines += "con_enable 0\n";

                lines += "\n// HITSOUND\n";
                if (rb_tf_dingalingalingOn.Checked) lines += "tf_dingalingaling 1\n"; else lines += "tf_dingalingaling 0\n";
                lines += "tf_dingaling_volume " + tb_tf_dingaling_volume.Text + "\n";
                lines += "";
                */

                List<TextBox> textBoxes = new List<TextBox>();
                List<RadioButton> radioButtons = new List<RadioButton>();

                foreach (TabPage tabPage in tabControl1.TabPages)
                {
                    Console.WriteLine(tabPage.Name);

                    // Print tab name
                    lines += "\n// " + tabPage.Name.Substring(3, tabPage.Name.Length - 3).ToUpper() + "\n";

                    // Get controls from current tab page
                    foreach (Control control in tabPage.Controls)
                    {
                        if (control is TextBox)
                            textBoxes.Add((TextBox)control);
                        else if (control is RadioButton && control.Name.Contains("On"))
                            radioButtons.Add((RadioButton)control);
                        else if (control is Panel)
                        {
                            foreach (Control panelControl in control.Controls)
                            {
                                if (panelControl is RadioButton && panelControl.Name.Contains("On"))
                                    radioButtons.Add((RadioButton)panelControl);
                            }
                        }
                    }

                    textBoxes = textBoxes.OrderBy(x => x.Name).ToList();
                    radioButtons = radioButtons.OrderBy(x => x.Name).ToList();

                    foreach (TextBox textBox in textBoxes)
                    {
                        lines += textBox.Name.Substring(3, textBox.Name.Length - 3) + " " + textBox.Text + "\n";
                    }

                    foreach (RadioButton radioButton in radioButtons)
                    {
                        lines += radioButton.Name.Substring(3, radioButton.Name.Length - 5);

                        if (radioButton.Checked)
                            lines += " 1\n";
                        else
                            lines += " 0\n";
                    }

                    textBoxes.Clear();
                    radioButtons.Clear();
                }

                System.IO.File.WriteAllText(filePath, lines);
            }
        }

        private void btn_createConfig_Click(object sender, EventArgs e)
        {
            saveConfig();
        }

        private void btn_useDefaultSettings_Click(object sender, EventArgs e)
        {
            var confirmResult = MessageBox.Show("Are you sure you want to continue? This will override all current settings.", "Use Default Settings", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirmResult == DialogResult.Yes)
            {
                setDefaultSettings();
            }
            
        }

        private void setDefaultSettings()
        {
            // GENERAL
            tb_sensitivity.Text = "4";
            tb_volume.Text = "1.0";
            rb_m_rawinputOn.Checked = false;
            rb_m_rawinputOff.Checked = true;

            rb_cl_autoreloadOn.Checked = false;
            rb_cl_autoreloadOff.Checked = true;

            rb_hud_fastswitchOn.Checked = false;
            rb_hud_fastswitchOff.Checked = true;

            rb_hud_classautokillOn.Checked = false;
            rb_hud_classautokillOff.Checked = true;


            // HUD
            rb_hud_combattextOn.Checked = true;
            rb_hud_combattextOff.Checked = false;

            rb_cl_hud_minmodeOn.Checked = false;
            rb_cl_hud_minmodeOff.Checked = true;

            rb_cl_showfpsOn.Checked = false;
            rb_cl_showfpsOff.Checked = true;

            rb_tf_scoreboard_ping_as_textOn.Checked = false;
            rb_tf_scoreboard_ping_as_textOff.Checked = true;

            rb_cl_spec_carrieditemsOn.Checked = true;
            rb_cl_spec_carrieditemsOff.Checked = false;

            rb_tf_hud_atrget_id_disable_floating_healthOn.Checked = false;
            rb_tf_hud_atrget_id_disable_floating_healthOff.Checked = true;

            rb_tf_hud_no_crosshair_on_scope_zoomOn.Checked = true;
            rb_tf_hud_no_crosshair_on_scope_zoomOff.Checked = false;

            // GRAPHICS
            tb_viewmodel_fov.Text = "54";
            tb_viewmodel_fov_demo.Text = "54";
            tb_fov_desired.Text = "75";
            rb_tf_hud_show_servertimelimitOn.Checked = true;
            rb_tf_hud_show_servertimelimitOff.Checked = false;

            rb_cl_hud_playerclass_use_playermodelOn.Checked = false;
            rb_cl_hud_playerclass_use_playermodelOff.Checked = true;

            rb_mat_vsyncOn.Checked = false;
            rb_mat_vsyncOff.Checked = true;

            // CLASSES
            rb_tf_medigun_autohealOn.Checked = false;
            rb_tf_medigun_autohealOff.Checked = true;

            rb_cl_autorezoomOn.Checked = true;
            rb_cl_autorezoomOff.Checked = false;

            // ADVANCED
            tb_fps_max.Text = "200";
            rb_cl_disablehtmlmotdOn.Checked = false;
            rb_cl_disablehtmlmotdOff.Checked = true;

            rb_cl_notifications_show_ingameOn.Checked = true;
            rb_cl_notifications_show_ingameOff.Checked = false;

            rb_con_enableOn.Checked = false;
            rb_con_enableOff.Checked = true;

            // HITSOUND
            rb_tf_dingalingalingOn.Checked = false;
            rb_tf_dingalingalingOff.Checked = true;

            tb_tf_dingaling_volume.Text = "0.75";
            tb_tf_dingaling_pitchmindmg.Text = "100";
            tb_tf_dingaling_pitchmaxdmg.Text = "100";

            // CROSSHAIR
            tb_cl_crosshair_red.Text = "200";
            tb_cl_crosshair_green.Text = "200";
            tb_cl_crosshair_blue.Text = "200";
            tb_cl_crosshair_scale.Text = "32";

            // NETWORK
            tb_cl_cmdrate.Text = "30";
            tb_cl_interp.Text = "0.1";
            tb_cl_interp_ratio.Text = "2.0";

            rb_cl_lagcompensationOn.Checked = true;
            rb_cl_lagcompensationOff.Checked = false;

            rb_cl_smoothOn.Checked = true;
            rb_cl_smoothOff.Checked = false;

            tb_cl_smoothtime.Text = "0.1";
            tb_cl_updaterate.Text = "20";
            tb_rate.Text = "80000";

            // SOUND
            rb_dsp_enhance_stereoOn.Checked =  true;
            rb_dsp_enhance_stereoOff.Checked = false;

            rb_dsp_slow_cpuOn.Checked = false;
            rb_dsp_slow_cpuOff.Checked = true;

            rb_snd_async_fullyasyncOn.Checked = false;
            rb_snd_async_fullyasyncOff.Checked = true;
        }

        private void setRecommendedSettings()
        {
            // GENERAL
            tb_sensitivity.Text = "4";
            tb_volume.Text = "1.0";
            rb_m_rawinputOn.Checked = true;
            rb_m_rawinputOff.Checked = false;

            rb_cl_autoreloadOn.Checked = true;
            rb_cl_autoreloadOff.Checked = false;

            rb_hud_fastswitchOn.Checked = true;
            rb_hud_fastswitchOff.Checked = false;

            rb_hud_classautokillOn.Checked = false;
            rb_hud_classautokillOff.Checked = true;


            // HUD
            rb_hud_combattextOn.Checked = true;
            rb_hud_combattextOff.Checked = false;

            rb_cl_hud_minmodeOn.Checked = true;
            rb_cl_hud_minmodeOff.Checked = false;

            rb_cl_showfpsOn.Checked = false;
            rb_cl_showfpsOff.Checked = true;

            rb_tf_scoreboard_ping_as_textOn.Checked = true;
            rb_tf_scoreboard_ping_as_textOff.Checked = false;

            rb_cl_spec_carrieditemsOn.Checked = true;
            rb_cl_spec_carrieditemsOff.Checked = false;

            rb_tf_hud_atrget_id_disable_floating_healthOn.Checked = true;
            rb_tf_hud_atrget_id_disable_floating_healthOff.Checked = false;

            rb_tf_hud_no_crosshair_on_scope_zoomOn.Checked = true;
            rb_tf_hud_no_crosshair_on_scope_zoomOff.Checked = false;

            // GRAPHICS
            tb_viewmodel_fov.Text = "70";
            tb_viewmodel_fov_demo.Text = "70";
            tb_fov_desired.Text = "90";
            rb_tf_hud_show_servertimelimitOn.Checked = true;
            rb_tf_hud_show_servertimelimitOff.Checked = false;

            rb_cl_hud_playerclass_use_playermodelOn.Checked = true;
            rb_cl_hud_playerclass_use_playermodelOff.Checked = false;

            rb_mat_vsyncOn.Checked = false;
            rb_mat_vsyncOff.Checked = true;

            // CLASSES
            rb_tf_medigun_autohealOn.Checked = false;
            rb_tf_medigun_autohealOff.Checked = true;

            rb_cl_autorezoomOn.Checked = false;
            rb_cl_autorezoomOff.Checked = true;

            // ADVANCED
            tb_fps_max.Text = "200";
            rb_cl_disablehtmlmotdOn.Checked = true;
            rb_cl_disablehtmlmotdOff.Checked = false;

            rb_cl_notifications_show_ingameOn.Checked = false;
            rb_cl_notifications_show_ingameOff.Checked = true;

            rb_con_enableOn.Checked = true;
            rb_con_enableOff.Checked = false;

            // HITSOUND
            rb_tf_dingalingalingOn.Checked = true;
            rb_tf_dingalingalingOff.Checked = false;

            tb_tf_dingaling_volume.Text = "0.75";
            tb_tf_dingaling_pitchmindmg.Text = "140";
            tb_tf_dingaling_pitchmaxdmg.Text = "60";

            // CROSSHAIR
            tb_cl_crosshair_red.Text = "0";
            tb_cl_crosshair_green.Text = "255";
            tb_cl_crosshair_blue.Text = "0";
            tb_cl_crosshair_scale.Text = "45";

            // NETWORK
            tb_cl_cmdrate.Text = "66";
            tb_cl_interp.Text = "0.015200";
            tb_cl_interp_ratio.Text = "1";

            rb_cl_lagcompensationOn.Checked = true;
            rb_cl_lagcompensationOff.Checked = false;

            rb_cl_smoothOn.Checked = false;
            rb_cl_smoothOff.Checked = true;

            tb_cl_smoothtime.Text = "0.01";
            tb_cl_updaterate.Text = "66";
            tb_rate.Text = "80000";

            // SOUND
            rb_dsp_enhance_stereoOn.Checked = true;
            rb_dsp_enhance_stereoOff.Checked = false;

            rb_dsp_slow_cpuOn.Checked = false;
            rb_dsp_slow_cpuOff.Checked = true;

            rb_snd_async_fullyasyncOn.Checked = true;
            rb_snd_async_fullyasyncOff.Checked = false;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            setRecommendedSettings();
        }

        private void btn_useRecommendedSettings_Click(object sender, EventArgs e)
        {
            var confirmResult = MessageBox.Show("Are you sure you want to continue? This will override all current settings.", "Use Recommended Settings", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (confirmResult == DialogResult.Yes)
            {
                setRecommendedSettings();
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void exportConfigToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveConfig();
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form aboutForm = new AboutBox1();
            aboutForm.ShowDialog();
        }
    }
}
